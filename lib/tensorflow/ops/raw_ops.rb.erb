# Generated by `rake generate_ops`

module Tensorflow
  module RawOps
    def self.figure_graph_or_context(inputs)
      if inputs.empty?
        Eager::Context.default
      elsif inputs.flatten.first.is_a?(Graph::Operation)
        inputs.flatten.first.graph
      else
        Eager::Context.default
      end
    end

    def self.execute(op_type, inputs=[], attrs={})
      executor = self.figure_graph_or_context(inputs)
      attrs = attrs.compact
      operation = executor.create_operation(op_type, inputs, attrs)
      if executor.is_a?(Graph::Graph)
        operation
      else
        executor.execute(operation)
      end
    end

  <% Tensorflow.op_defs.values.each do |op_def|
     name = RawOpHelper.underscore(op_def.name).downcase

     input_names = op_def.input_arg.map do |input|
       RawOpHelper.check_name(input.name)
     end

     attributes_in = op_def.attr.map do |attr_def|
       RawOpHelper.process_attribute(attr_def)
     end

     attributes_out = op_def.attr.map do |attr_def|
       attribute_name = RawOpHelper.check_attribute_name(attr_def)
       "#{attr_def.name}: #{attribute_name}"
     end %>
    def self.<%= name %>(<%= (input_names + attributes_in).join(', ') %>)
      self.execute("<%= op_def.name %>", [<%= input_names.join(', ') %>], <%= attributes_out.join(', ') %>)
    end
  <% end %>
  end
end